@{
    ViewBag.Title = "Search";
}

<section class="bg-light d-flex justify-content-evenly align-items-center flex-grow-1">
    <div class="w-50">
        @using (Html.BeginForm("Search", "Product", FormMethod.Post, new { @class = "form-control bg-light" })) 
        {

            <div class="col-auto mx-5 my-2">
                @Html.Label("query", "Search Product", new { @class = "form-label" })
                @Html.TextBox("query", null, new { @class = "form-control", id = "query", placeholder = "Product name..." })
            </div>
            <div class="col-auto mx-5 my-2">
                @Html.Label("quantity", "Quantity", new { @class = "form-label" })
                @Html.TextBox("quantity", null, new { @class = "form-control", id = "quantity", placeholder = "Enter quantity (e.g., 1.5 or 1,5)" })
            </div>
            <div class="col-auto mx-5 my-2">
                @Html.Label("unit", "Unit", new { @class = "form-label" })
                @Html.DropDownList("unit", new SelectList(new[]
                    {
                        new { Value = "l", Text = "L" },
                        new { Value = "ml", Text = "mL" },
                        new { Value = "piece", Text = "piece" },
                        new { Value = "g", Text = "g" },
                        new { Value = "kg", Text = "kg" }
                    }, "Value", "Text"), "Select Unit", new { @class = "form-select", id = "unit", required = "required" })
            </div>
            <div class="col-auto mx-5 my-4">
                <div class="form-check">
                    @Html.Label("exactItemName", "Exact Item Name", new { @class = "form-check-label" })
                    @Html.CheckBox("exactItemName", new { @class = "form-check-input", id = "exactItemName" })
                </div>
            </div>
            <div class="col-auto mx-5 my-2">
                <div class="d-flex justify-content-center">
                    <button type="submit" class="btn btn-primary mx-2">Search</button>
                    <button type="button" class="btn btn-success mx-2" onclick="addToFavorites()">Save to Favorites</button>
                </div>
            </div>
        }
        <div class="mt-3 d-flex justify-content-around align-items-center">
            <div class="d-flex flex-column justify-content-center">
                <div class="d-flex justify-content-center align-items-center mb-3">
                    <p class="text-center mx-2 my-0">Favourites:</p>
                    <button id="delete-button" class="btn btn-outline-danger mx-2" onclick="deleteButton(false)">
                        <i class="bi bi-trash3-fill"></i>
                    </button>
                </div>
                <div id="favorites-list"></div>
            </div>

        </div>
    </div>

    <!-- Results Section -->
    <div class="results-container mt-5">
        <div class="results">
            <h2>Carrefour</h2>
            @if (ViewBag.CarrefourResults is List<MDS_PROJECT.Models.Product> carrefourResults && carrefourResults.Any())
            {
                <div class="mb-3">
                    <button class="btn btn-secondary btn-sm" onclick="sortCarrefourResultsByPrice()">Sort by Price</button>
                    <button class="btn btn-secondary btn-sm" onclick="sortCarrefourResultsByName()">Sort by Name</button>
                    <button class="btn btn-secondary btn-sm" onclick="sortCarrefourResultsByQuantity()">Sort by Quantity</button>
                </div>
                <ul id="carrefour-results" class="product-list">
                    @for (var i = 0; i < ViewBag.CarrefourResults.Count; i ++) 
                    {
                        var item = ViewBag.CarrefourResults[i];
                        <div class="d-flex align-items-center">
                            <li class="carrefour-item mx-2" data-quantity="@item.Quantity" data-price="@item.Price">@item.ItemName, @item.Quantity @item.MeasureUnit, @item.Price @item.Currency</li>
                            <button id="result-@item.Id" class="btn btn-outline-success btn-sm mx-2" onclick="addToCart(@item.Id, '@item.ItemName', '@item.Quantity', '@item.MeasureUnit', '@item.Price', '@item.Link', '@item.Store')">
                                <i class="bi bi-plus"></i>
                            </button>
                        </div>
                    }
                </ul>
            }
            else 
            {
                <p class="no-results">Carrefour results not found.</p>
            }

        </div>
   </div>
      
    <script>
        function addToCart(id, itemName, quantity, measureUnit, price, link, store)
        {
            let products = localStorage.getItem("cartItems");

            if (products === null)
            {
                products = [
                    {
                        Id: id,
                        ItemName: itemName, 
                        Quantity: quantity, 
                        MeasureUnit: measureUnit, 
                        Price: price, 
                        Link: link, 
                        Store: store
                    }
                ]
            }
            else 
            {
                products = JSON.parse(products);
                products.push(
                    {
                        Id: id,
                        ItemName: itemName, 
                        Quantity: quantity, 
                        MeasureUnit: measureUnit, 
                        Price: price, 
                        Link: link,
                        Store: store
                    }
                );
            }

            localStorage.setItem("cartItems", JSON.stringify(products));

            const added = document.createElement("i");
            added.className = "bi bi-check-lg";
            const removed = document.getElementById(`result-${id}`);
            removed.replaceWith(added);
        }

        function setQueryValue(query, quantity, unit) {
            document.getElementById('query').value = query;
            document.getElementById('quantity').value = quantity;
            document.getElementById('unit').value = unit;
        }

        function parseFavorite(buttonText) {
            // Use a regular expression to extract the parts
            const match = buttonText.match(/^(.*?) - (\d+) (.+)$/);

            if (match) {
                return {
                    Query: match[1],          // Extracts the query (e.g., "Apples")
                    Quantity: parseInt(match[2], 10), // Extracts the quantity (e.g., 5)
                    Unit: match[3]            // Extracts the unit (e.g., "kg")
                };
            } else {
                throw new Error("String format is invalid");
            }
        }

        function deleteFromFavorites(query, quantity, unit) {
            let favorites = localStorage.getItem("favorites");
            if (favorites === null) {
                Error("Nothing to delete.");
                return;
            }

            favorites = JSON.parse(favorites);
            newFavorites = [];
            let deleted = false;

            for (let favorite of favorites)
            {
                if (favorite.Query == query && favorite.Quantity == quantity && favorite.Unit == unit)
                {
                    deleted = true;
                    continue;
                }
                newFavorites.push(favorite);
            }

            if (!deleted)
            {
                Error("No item found.");
                return;
            }

            localStorage.setItem("favorites", JSON.stringify(newFavorites));
            displayFavorites();

        }

        function addToFavorites() {
            const query = document.getElementById('query').value.trim();
            const quantity = document.getElementById('quantity').value.trim();
            const unit = document.getElementById('unit').value;

            if (!query || !quantity || !unit) {
                alert('Please fill in all fields to add to favorites.');
                return;
            }

            let favorites = localStorage.getItem("favorites");
            if (favorites === undefined)
            {
                favorites = [
                    {Query: query, Quantity: quantity, Unit: unit}
                ];
            }
            else 
            {
                favorites = JSON.parse(favorites);
                if (favorites.length >= 3) {
                    Error("You cannot add more than 3 items in favorites!");
                    return;
                }
                favorites.push({Query: query, Quantity: quantity, Unit: unit});
            }
            localStorage.setItem("favorites", JSON.stringify(favorites));

            displayFavorites();
        }
        function deleteButton() {
            // Get the main button and the container div
            const button = document.getElementById("delete-button");
            const favoritesList = document.getElementById("favorites-list");

            // Determine the new class and text based on the current state of the main button
            const isDark = button.classList.contains("btn-outline-dark");
            const oldClass = isDark ? "btn-outline-dark" : "btn-outline-danger";
            const newClass = isDark ? "btn-outline-danger" : "btn-outline-dark";
            const newHtml = isDark ? "<i class=\"bi bi-trash3-fill\"></i>" : "<i class=\"bi bi-x-lg\"></i>";

            // Update the main button
            button.classList.remove(oldClass);
            button.classList.add(newClass);
            button.innerHTML = newHtml;


            displayFavorites();
        }

        function displayFavorites() {
            let favorites = localStorage.getItem("favorites");

            if (favorites === null)
                return;
            favorites = JSON.parse(favorites);

            const button = document.getElementById("delete-button");
            const favoritesList = document.getElementById('favorites-list');
            favoritesList.innerHTML = "";

            const isDark = button.classList.contains("btn-outline-dark");
            const Class = isDark ? "btn-outline-danger" : "btn-outline-dark";

            // Create a button for the favorite item
            for (let favorite of favorites) {
                const favoriteItem = document.createElement('button');
                favoriteItem.type = 'button';
                favoriteItem.className = `btn ${Class} rounded-pill px-4 mx-1`;
                favoriteItem.innerText = `${favorite.Query} - ${favorite.Quantity} ${favorite.Unit}`;
                favoriteItem.onclick = isDark ? () => deleteFromFavorites(favorite.Query, favorite.Quantity, favorite.Unit)
                    : () => setQueryValue(favorite.Query, favorite.Quantity, favorite.Unit);

                // Add the button to the favorites list
                favoritesList.appendChild(favoriteItem);
            }
        }

        var carrefourSortByPriceAsc = true;
        var carrefourSortByNameAsc = true;
        var carrefourSortByQuantityAsc = true;

        function sortCarrefourResultsByPrice() {
            var ul = document.getElementById("carrefour-results");
            var items = ul.getElementsByTagName("li");
            var sortedItems = Array.from(items).sort(function (a, b) {
                var priceA = getPriceValue(a.innerText);
                var priceB = getPriceValue(b.innerText);
                return carrefourSortByPriceAsc ? priceA - priceB : priceB - priceA;
            });
            for (var i = 0; i < sortedItems.length; i++) {
                ul.appendChild(sortedItems[i]);
            }
            carrefourSortByPriceAsc = !carrefourSortByPriceAsc;
        }

        function sortCarrefourResultsByName() {
            var ul = document.getElementById("carrefour-results");
            var items = ul.getElementsByTagName("li");
            var sortedItems = Array.from(items).sort(function (a, b) {
                var nameA = a.innerText.split(",")[0].trim();
                var nameB = b.innerText.split(",")[0].trim();
                return carrefourSortByNameAsc ? nameA.localeCompare(nameB) : nameB.localeCompare(nameA);
            });
            for (var i = 0; i < sortedItems.length; i++) {
                ul.appendChild(sortedItems[i]);
            }
            carrefourSortByNameAsc = !carrefourSortByNameAsc;
        }

        function sortCarrefourResultsByQuantity() {
            var ul = document.getElementById("carrefour-results");
            var items = ul.getElementsByTagName("li");
            var sortedItems = Array.from(items).sort(function (a, b) {
                var quantityA = getQuantityValue(a.innerText);
                var quantityB = getQuantityValue(b.innerText);
                return carrefourSortByQuantityAsc ? quantityA - quantityB : quantityB - quantityA;
            });
            for (var i = 0; i < sortedItems.length; i++) {
                ul.appendChild(sortedItems[i]);
            }
            carrefourSortByQuantityAsc = !carrefourSortByQuantityAsc;
        }

        document.addEventListener('DOMContentLoaded', () => {
            displayFavorites();
        });
    </script>


</section>