@{
    ViewBag.Title = "Search";
}

<section class="pt-4 bg-light d-flex justify-content-evenly align-items-center flex-grow-1">
    <div class="w-50">
        @using (Html.BeginForm("Search", "Product", FormMethod.Post, new { @class = "form-control bg-light" })) 
        {

            <div class="col-auto mx-5 my-2">
                @Html.Label("query", "Search Product", new { @class = "form-label" })
                @Html.TextBox("query", null, new { @class = "form-control", id = "query", placeholder = "Product name..." })
            </div>
            <div class="col-auto mx-5 my-2">
                @Html.Label("quantity", "Quantity", new { @class = "form-label" })
                @Html.TextBox("quantity", null, new { @class = "form-control", id = "quantity", placeholder = "Enter quantity (e.g., 1.5 or 1,5)" })
            </div>
            <div class="col-auto mx-5 my-2">
                @Html.Label("unit", "Unit", new { @class = "form-label" })
                @Html.DropDownList("unit", new SelectList(new[]
                    {
                        new { Value = "l", Text = "L" },
                        new { Value = "ml", Text = "mL" },
                        new { Value = "piece", Text = "piece" },
                        new { Value = "g", Text = "g" },
                        new { Value = "kg", Text = "kg" }
                    }, "Value", "Text"), "Select Unit", new { @class = "form-select", id = "unit", required = "required" })
            </div>
            <div class="col-auto mx-5 my-4">
                <div class="form-check">
                    @Html.Label("exactItemName", "Exact Item Name", new { @class = "form-check-label" })
                    @Html.CheckBox("exactItemName", new { @class = "form-check-input", id = "exactItemName" })
                </div>
            </div>
            <div class="col-auto mx-5 my-2">
                <div class="d-flex justify-content-center">
                    <button type="submit" class="btn btn-primary mx-2">Search</button>
                    <button type="button" class="btn btn-success mx-2" onclick="addToFavorites()">Save to Favorites</button>
                </div>
            </div>
        }
        <div class="mt-3 d-flex justify-content-around">
            <div class="d-flex flex-column justify-content-center">
                <p class="text-center">Try most popular searches:</p>
                <div>
                    <button type="button" class="btn btn-outline-dark rounded-pill px-4 mx-1" onclick="setQueryValue('Apa', '1.5', 'l')">
                        Apa
                    </button>
                    <button type="button" class="btn btn-outline-dark rounded-pill px-4 mx-1" onclick="setQueryValue('Paine', '600', 'g')">
                        Paine
                    </button>
                    <button type="button" class="btn btn-outline-dark rounded-pill px-4 mx-1" onclick="setQueryValue('Lapte', '500', 'ml')">
                        Lapte
                    </button>
                </div>
            </div>
            <div class="d-flex flex-column justify-content-center">
                <p class="text-center">Favourites:</p>
                <div id="favourites-buttons"></div>
            </div>

        </div>
    </div>

    <!-- Results Section -->
    <div class="results-container mt-5">
        <div class="results">
            <h2><a href="javascript:void(0)" onclick="redirectToMaps('Carrefour')">Carrefour</a></h2>
            @if (ViewBag.CarrefourResults is List<MDS_PROJECT.Models.Product> carrefourResults && carrefourResults.Any())
            {
                <div class="mb-3">
                    <button class="btn btn-secondary btn-sm" onclick="sortCarrefourResultsByPrice()">Sort by Price</button>
                    <button class="btn btn-secondary btn-sm" onclick="sortCarrefourResultsByName()">Sort by Name</button>
                    <button class="btn btn-secondary btn-sm" onclick="sortCarrefourResultsByQuantity()">Sort by Quantity</button>
                </div>
                <ul id="carrefour-results" class="product-list">
                    @foreach (var item in ViewBag.CarrefourResults)
                    {
                        <li class="carrefour-item" data-quantity="@item.Quantity" data-price="@item.Price">@item.ItemName, @item.Quantity @item.MeasureUnit, @item.Price @item.Currency</li>
                    }
                </ul>
            }
            else
            {
                <p class="no-results">Nu s-au găsit rezultate pentru Carrefour.</p>
            }
        </div>

        <div class="results">
            <h2><a href="javascript:void(0)" onclick="redirectToMaps('Kaufland')">Kaufland</a></h2>
            @if (ViewBag.KauflandResults is List<MDS_PROJECT.Models.Product> kauflandResults && kauflandResults.Any())
            {
                <div class="mb-3">
                    <button class="btn btn-secondary btn-sm" onclick="sortKauflandResultsByPrice()">Sort by Price</button>
                    <button class="btn btn-secondary btn-sm" onclick="sortKauflandResultsByName()">Sort by Name</button>
                    <button class="btn btn-secondary btn-sm" onclick="sortKauflandResultsByQuantity()">Sort by Quantity</button>
                </div>
                <ul id="kaufland-results" class="product-list">
                    @foreach (var item in ViewBag.KauflandResults)
                    {
                        <li class="kaufland-item" data-quantity="@item.Quantity" data-price="@item.Price">@item.ItemName, @item.Quantity @item.MeasureUnit, @item.Price Lei</li>
                    }
                </ul>
            }
            else
            {
                <p class="no-results">Nu s-au găsit rezultate pentru Kaufland.</p>
            }
        </div>
    </div>
      
    <script>
        function setQueryValue(query, quantity, unit) {
            document.getElementById('query').value = query;
            document.getElementById('quantity').value = quantity;
            document.getElementById('unit').value = unit;
        }

        function addToFavorites() {
            const query = document.getElementById('query').value.trim();
            const quantity = document.getElementById('quantity').value.trim();
            const unit = document.getElementById('unit').value;

            if (!query || !quantity || !unit) {
                alert('Please fill in all fields to add to favorites.');
                return;
            }

            fetch('/Favorites/AddFavorite', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ query, quantity, unit })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to add favorite');
                }
                return response.json();
            })
            .then(data => {
                displayFavorite(data);
            })
            .catch(error => alert(error.message));
        }

        function displayFavorite(favorite) {
            const favoritesList = document.getElementById('favorites-list');

            // Create a button for the favorite item
            const favoriteItem = document.createElement('button');
            favoriteItem.type = 'button';
            favoriteItem.className = 'btn btn-outline-light rounded-pill px-4 mx-1';
            favoriteItem.innerText = `${favorite.name} - ${favorite.quantity} ${favorite.unit}`;
            favoriteItem.onclick = () => setQueryValue(favorite.name, favorite.quantity, favorite.unit);

            // Add the button to the favorites list
            favoritesList.appendChild(favoriteItem);
        }

        var carrefourSortByPriceAsc = true;
        var carrefourSortByNameAsc = true;
        var carrefourSortByQuantityAsc = true;

        function sortCarrefourResultsByPrice() {
            var ul = document.getElementById("carrefour-results");
            var items = ul.getElementsByTagName("li");
            var sortedItems = Array.from(items).sort(function (a, b) {
                var priceA = getPriceValue(a.innerText);
                var priceB = getPriceValue(b.innerText);
                return carrefourSortByPriceAsc ? priceA - priceB : priceB - priceA;
            });
            for (var i = 0; i < sortedItems.length; i++) {
                ul.appendChild(sortedItems[i]);
            }
            carrefourSortByPriceAsc = !carrefourSortByPriceAsc;
        }

        function sortCarrefourResultsByName() {
            var ul = document.getElementById("carrefour-results");
            var items = ul.getElementsByTagName("li");
            var sortedItems = Array.from(items).sort(function (a, b) {
                var nameA = a.innerText.split(",")[0].trim();
                var nameB = b.innerText.split(",")[0].trim();
                return carrefourSortByNameAsc ? nameA.localeCompare(nameB) : nameB.localeCompare(nameA);
            });
            for (var i = 0; i < sortedItems.length; i++) {
                ul.appendChild(sortedItems[i]);
            }
            carrefourSortByNameAsc = !carrefourSortByNameAsc;
        }

        function sortCarrefourResultsByQuantity() {
            var ul = document.getElementById("carrefour-results");
            var items = ul.getElementsByTagName("li");
            var sortedItems = Array.from(items).sort(function (a, b) {
                var quantityA = getQuantityValue(a.innerText);
                var quantityB = getQuantityValue(b.innerText);
                return carrefourSortByQuantityAsc ? quantityA - quantityB : quantityB - quantityA;
            });
            for (var i = 0; i < sortedItems.length; i++) {
                ul.appendChild(sortedItems[i]);
            }
            carrefourSortByQuantityAsc = !carrefourSortByQuantityAsc;
        }

        var kauflandSortByPriceAsc = true;
        var kauflandSortByNameAsc = true;
        var kauflandSortByQuantityAsc = true;

        function sortKauflandResultsByPrice() {
            var ul = document.getElementById("kaufland-results");
            var items = ul.getElementsByTagName("li");
            var sortedItems = Array.from(items).sort(function (a, b) {
                var priceA = getPriceValue(a.innerText);
                var priceB = getPriceValue(b.innerText);
                return kauflandSortByPriceAsc ? priceA - priceB : priceB - priceA;
            });
            for (var i = 0; i < sortedItems.length; i++) {
                ul.appendChild(sortedItems[i]);
            }
            kauflandSortByPriceAsc = !kauflandSortByPriceAsc;
        }

        function sortKauflandResultsByName() {
            var ul = document.getElementById("kaufland-results");
            var items = ul.getElementsByTagName("li");
            var sortedItems = Array.from(items).sort(function (a, b) {
                var nameA = a.innerText.split(",")[0].trim();
                var nameB = b.innerText.split(",")[0].trim();
                return kauflandSortByNameAsc ? nameA.localeCompare(nameB) : nameB.localeCompare(nameA);
            });
            for (var i = 0; i < sortedItems.length; i++) {
                ul.appendChild(sortedItems[i]);
            }
            kauflandSortByNameAsc = !kauflandSortByNameAsc;
        }

        function sortKauflandResultsByQuantity() {
            var ul = document.getElementById("kaufland-results");
            var items = ul.getElementsByTagName("li");
            var sortedItems = Array.from(items).sort(function (a, b) {
                var quantityA = getQuantityValue(a.innerText);
                var quantityB = getQuantityValue(b.innerText);
                return kauflandSortByQuantityAsc ? quantityA - quantityB : quantityB - quantityA;
            });
            for (var i = 0; i < sortedItems.length; i++) {
                ul.appendChild(sortedItems[i]);
            }
            kauflandSortByQuantityAsc = !kauflandSortByQuantityAsc;
        }

    document.addEventListener('DOMContentLoaded', () => {
        fetch('/Favorites/GetFavorites')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to load favorites');
                }
                return response.json();
            })
            .then(favorites => {
                favorites.forEach(displayFavorite);
            })
            .catch(error => console.error('Error fetching favorites:', error));
    });
    </script>


</section>